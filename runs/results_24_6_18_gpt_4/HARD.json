{
    "rpg_level_gen": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nLast Played Levels (last_levels) (list) = []\nDifficulty of the New Level (difficulty) (int) = 1\nWidth of the Level (level_width) (int) = 20\nHeight of the Level (level_height) (int) = 20\n\n[Output Information]\nNext Level (Level)\n\n[Type Explanations]\nGame Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)\n\n[Action]\nCreate the Next Level\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Level(name=\"Level 1\", difficulty=1, width=20, height=20, num_wall=40, num_enemies=4, time_countdown=120, n_retries_allowed=3)",
                    "token_usage": {
                        "completion_tokens": 46,
                        "prompt_tokens": 311,
                        "total_tokens": 357
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nLevel of the Map (level) (Level) = Level(name=\"Level 1\", difficulty=1, width=20, height=20, num_wall=40, num_enemies=4, time_countdown=120, n_retries_allowed=3)\n\n[Output Information]\nMap of the Level (Map)\n\n[Type Explanations]\nGame Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)\nMap of the Level (Map) (obj) eg:- Map(level=Level, walls=list[Wall], small_obstacles=list[Position], enemies=list[Position], player_pos=Position) -> Level of the Map (level) (Level), Walls in the Map Other than Edges (walls) (list[Wall]), Obstacles in the Map (small_obstacles) (list[Position]), Enemies in the Map (enemies) (list[Position]), Player Position in the Map (player_pos) (Position)\nPosition (Position) (obj) eg:- Position(x=int, y=int) -> X Coordinate (x) (int), Y Coordinate (y) (int)\nWall (Wall) (obj) eg:- Wall(start_pos=Position, end_pos=Position) -> Start Position of the Wall (start_pos) (Position), End Position of the Wall (end_pos) (Position)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Map(level=Level(name=\"Level 1\", difficulty=1, width=20, height=20, num_wall=40, num_enemies=4, time_countdown=120, n_retries_allowed=3), walls=[Wall(start_pos=Position(x=1, y=1), end_pos=Position(x=1, y=18)), Wall(start_pos=Position(x=1, y=1), end_pos=Position(x=18, y=1)), Wall(start_pos=Position(x=18, y=1), end_pos=Position(x=18, y=18)), Wall(start_pos=Position(x=1, y=18), end_pos=Position(x=18, y=18))], small_obstacles=[Position(x=5, y=5), Position(x=5, y=6), Position(x=6, y=5), Position(x=6, y=6)], enemies=[Position(x=10, y=10), Position(x=10, y=11), Position(x=11, y=10), Position(x=11, y=11)], player_pos=Position(x=2, y=2))",
                    "token_usage": {
                        "completion_tokens": 242,
                        "prompt_tokens": 522,
                        "total_tokens": 764
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nLast Played Levels (last_levels) (list) = [Level(name=\"Level 1\", difficulty=1, width=20, height=20, num_wall=40, num_enemies=4, time_countdown=120, n_retries_allowed=3)]\nDifficulty of the New Level (difficulty) (int) = 1\nWidth of the Level (level_width) (int) = 20\nHeight of the Level (level_height) (int) = 20\n\n[Output Information]\nNext Level (Level)\n\n[Type Explanations]\nGame Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)\n\n[Action]\nCreate the Next Level\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Level(name=\"Level 2\", difficulty=1, width=20, height=20, num_wall=44, num_enemies=5, time_countdown=120, n_retries_allowed=3)",
                    "token_usage": {
                        "completion_tokens": 46,
                        "prompt_tokens": 354,
                        "total_tokens": 400
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nLevel of the Map (level) (Level) = Level(name=\"Level 2\", difficulty=1, width=20, height=20, num_wall=44, num_enemies=5, time_countdown=120, n_retries_allowed=3)\n\n[Output Information]\nMap of the Level (Map)\n\n[Type Explanations]\nGame Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)\nMap of the Level (Map) (obj) eg:- Map(level=Level, walls=list[Wall], small_obstacles=list[Position], enemies=list[Position], player_pos=Position) -> Level of the Map (level) (Level), Walls in the Map Other than Edges (walls) (list[Wall]), Obstacles in the Map (small_obstacles) (list[Position]), Enemies in the Map (enemies) (list[Position]), Player Position in the Map (player_pos) (Position)\nPosition (Position) (obj) eg:- Position(x=int, y=int) -> X Coordinate (x) (int), Y Coordinate (y) (int)\nWall (Wall) (obj) eg:- Wall(start_pos=Position, end_pos=Position) -> Start Position of the Wall (start_pos) (Position), End Position of the Wall (end_pos) (Position)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output]\nMap(level=Level(name=\"Level 2\", difficulty=1, width=20, height=20, num_wall=44, num_enemies=5, time_countdown=120, n_retries_allowed=3), walls=[Wall(start_pos=Position(x=1, y=1), end_pos=Position(x=18, y=1)), Wall(start_pos=Position(x=1, y=1), end_pos=Position(x=1, y=18))], small_obstacles=[], enemies=[Position(x=5, y=5), Position(x=7, y=7), Position(x=9, y=9), Position(x=11, y=11), Position(x=13, y=13)], player_pos=Position(x=2, y=2))",
                    "token_usage": {
                        "completion_tokens": 165,
                        "prompt_tokens": 522,
                        "total_tokens": 687
                    }
                }
            ],
            "output": ")"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Create Next Level\n\n---\n\nFollow the following format.\n\nLast Levels: Last Played Levels\n\nDifficulty: Difficulty of the New Level\n\nLevel Width: Width of the Level\n\nLevel Height: Height of the Level\n\nNext Level: Next Level. Respond with a single JSON object. JSON Schema: {\"properties\": {\"name\": {\"description\": \"Name of the Level\", \"title\": \"Name\", \"type\": \"string\"}, \"difficulty\": {\"description\": \"Difficulty of the Level\", \"title\": \"Difficulty\", \"type\": \"integer\"}, \"width\": {\"description\": \"Width of the Map\", \"title\": \"Width\", \"type\": \"integer\"}, \"height\": {\"description\": \"Height of the Map\", \"title\": \"Height\", \"type\": \"integer\"}, \"num_wall\": {\"description\": \"Number of Walls in the Map\", \"title\": \"Num Wall\", \"type\": \"integer\"}, \"num_enemies\": {\"description\": \"Number of Enemies in the Map\", \"title\": \"Num Enemies\", \"type\": \"integer\"}, \"time_countdown\": {\"description\": \"Time Countdown of the Level\", \"title\": \"Time Countdown\", \"type\": \"integer\"}, \"n_retries_allowed\": {\"description\": \"Number of Retries Allowed\", \"title\": \"N Retries Allowed\", \"type\": \"integer\"}}, \"required\": [\"name\", \"difficulty\", \"width\", \"height\", \"num_wall\", \"num_enemies\", \"time_countdown\", \"n_retries_allowed\"], \"title\": \"Level\", \"type\": \"object\"}\n\n---\n\nLast Levels: []\n\nDifficulty: 1\n\nLevel Width: 20\n\nLevel Height: 20\n\nNext Level:",
                    "output": "{\"name\": \"Level 1\", \"difficulty\": 1, \"width\": 20, \"height\": 20, \"num_wall\": 10, \"num_enemies\": 5, \"time_countdown\": 300, \"n_retries_allowed\": 3}",
                    "token_usage": {
                        "completion_tokens": 58,
                        "prompt_tokens": 352,
                        "total_tokens": 410
                    }
                },
                {
                    "prompt": "Create Map for the Level\n\n---\n\nFollow the following format.\n\nLevel: Level\nMap: Map. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Level\": {\"properties\": {\"name\": {\"description\": \"Name of the Level\", \"title\": \"Name\", \"type\": \"string\"}, \"difficulty\": {\"description\": \"Difficulty of the Level\", \"title\": \"Difficulty\", \"type\": \"integer\"}, \"width\": {\"description\": \"Width of the Map\", \"title\": \"Width\", \"type\": \"integer\"}, \"height\": {\"description\": \"Height of the Map\", \"title\": \"Height\", \"type\": \"integer\"}, \"num_wall\": {\"description\": \"Number of Walls in the Map\", \"title\": \"Num Wall\", \"type\": \"integer\"}, \"num_enemies\": {\"description\": \"Number of Enemies in the Map\", \"title\": \"Num Enemies\", \"type\": \"integer\"}, \"time_countdown\": {\"description\": \"Time Countdown of the Level\", \"title\": \"Time Countdown\", \"type\": \"integer\"}, \"n_retries_allowed\": {\"description\": \"Number of Retries Allowed\", \"title\": \"N Retries Allowed\", \"type\": \"integer\"}}, \"required\": [\"name\", \"difficulty\", \"width\", \"height\", \"num_wall\", \"num_enemies\", \"time_countdown\", \"n_retries_allowed\"], \"title\": \"Level\", \"type\": \"object\"}, \"Position\": {\"properties\": {\"x\": {\"description\": \"X Coordinate\", \"title\": \"X\", \"type\": \"integer\"}, \"y\": {\"description\": \"Y Coordinate\", \"title\": \"Y\", \"type\": \"integer\"}}, \"required\": [\"x\", \"y\"], \"title\": \"Position\", \"type\": \"object\"}, \"Wall\": {\"properties\": {\"start_pos\": {\"allOf\": [{\"$ref\": \"#/$defs/Position\"}], \"description\": \"Start Position of the Wall\"}, \"end_pos\": {\"allOf\": [{\"$ref\": \"#/$defs/Position\"}], \"description\": \"End Position of the Wall\"}}, \"required\": [\"start_pos\", \"end_pos\"], \"title\": \"Wall\", \"type\": \"object\"}}, \"properties\": {\"level\": {\"allOf\": [{\"$ref\": \"#/$defs/Level\"}], \"description\": \"Level of the Map\"}, \"walls\": {\"description\": \"Walls in the Map Other than Edges\", \"items\": {\"$ref\": \"#/$defs/Wall\"}, \"title\": \"Walls\", \"type\": \"array\"}, \"small_obstacles\": {\"description\": \"Obstacles in the Map\", \"items\": {\"$ref\": \"#/$defs/Position\"}, \"title\": \"Small Obstacles\", \"type\": \"array\"}, \"enemies\": {\"description\": \"Enemies in the Map\", \"items\": {\"$ref\": \"#/$defs/Position\"}, \"title\": \"Enemies\", \"type\": \"array\"}, \"player_pos\": {\"allOf\": [{\"$ref\": \"#/$defs/Position\"}], \"description\": \"Player Position in the Map\"}}, \"required\": [\"level\", \"walls\", \"small_obstacles\", \"enemies\", \"player_pos\"], \"title\": \"Map\", \"type\": \"object\"}\n\n---\n\nLevel: {\"name\":\"Level 1\",\"difficulty\":1,\"width\":20,\"height\":20,\"num_wall\":10,\"num_enemies\":5,\"time_countdown\":300,\"n_retries_allowed\":3}\nMap:",
                    "output": "{\n  \"level\": {\n    \"name\": \"Level 1\",\n    \"difficulty\": 1,\n    \"width\": 20,\n    \"height\": 20,\n    \"num_wall\": 10,\n    \"num_enemies\": 5,\n    \"time_countdown\": 300,\n    \"n_retries_allowed\": 3\n  },\n  \"walls\": [\n    {\n      \"start_pos\": {\n        \"x\": 5,\n        \"y\": 5\n      },\n      \"end_pos\": {\n        \"x\": 5,\n        \"y\": 15\n      }\n    },\n    {\n      \"start_pos\": {\n        \"x\": 10,\n        \"y\": 5\n      },\n      \"end_pos\": {\n        \"x\": 10,\n        \"y\": 15\n      }\n    },\n    {\n      \"start_pos\": {\n        \"x\": 15,\n        \"y\": 5\n      },\n      \"end_pos\": {\n        \"x\": 15,\n        \"y\": 15\n      }\n    }\n  ],\n  \"small_obstacles\": [\n    {\n      \"x\": 7,\n      \"y\": 7\n    },\n    {\n      \"x\": 12,\n      \"y\": 12\n    },\n    {\n      \"x\": 17,\n      \"y\": 17\n    }\n  ],\n  \"enemies\": [\n    {\n      \"x\": 6,\n      \"y\": 6\n    },\n    {\n      \"x\": 11,\n      \"y\": 11\n    },\n    {\n      \"x\": 16,\n      \"y\": 16\n    }\n  ],\n  \"player_pos\": {\n    \"x\": 1,\n    \"y\": 1\n  }\n}",
                    "token_usage": {
                        "completion_tokens": 373,
                        "prompt_tokens": 733,
                        "total_tokens": 1106
                    }
                },
                {
                    "prompt": "Create Next Level\n\n---\n\nFollow the following format.\n\nLast Levels: Last Played Levels\n\nDifficulty: Difficulty of the New Level\n\nLevel Width: Width of the Level\n\nLevel Height: Height of the Level\n\nNext Level: Next Level. Respond with a single JSON object. JSON Schema: {\"properties\": {\"name\": {\"description\": \"Name of the Level\", \"title\": \"Name\", \"type\": \"string\"}, \"difficulty\": {\"description\": \"Difficulty of the Level\", \"title\": \"Difficulty\", \"type\": \"integer\"}, \"width\": {\"description\": \"Width of the Map\", \"title\": \"Width\", \"type\": \"integer\"}, \"height\": {\"description\": \"Height of the Map\", \"title\": \"Height\", \"type\": \"integer\"}, \"num_wall\": {\"description\": \"Number of Walls in the Map\", \"title\": \"Num Wall\", \"type\": \"integer\"}, \"num_enemies\": {\"description\": \"Number of Enemies in the Map\", \"title\": \"Num Enemies\", \"type\": \"integer\"}, \"time_countdown\": {\"description\": \"Time Countdown of the Level\", \"title\": \"Time Countdown\", \"type\": \"integer\"}, \"n_retries_allowed\": {\"description\": \"Number of Retries Allowed\", \"title\": \"N Retries Allowed\", \"type\": \"integer\"}}, \"required\": [\"name\", \"difficulty\", \"width\", \"height\", \"num_wall\", \"num_enemies\", \"time_countdown\", \"n_retries_allowed\"], \"title\": \"Level\", \"type\": \"object\"}\n\n---\n\nLast Levels: [{\"name\":\"Level 1\",\"difficulty\":1,\"width\":20,\"height\":20,\"num_wall\":10,\"num_enemies\":5,\"time_countdown\":300,\"n_retries_allowed\":3}]\n\nDifficulty: 1\n\nLevel Width: 20\n\nLevel Height: 20\n\nNext Level:",
                    "output": "{\"name\": \"Level 2\", \"difficulty\": 1, \"width\": 20, \"height\": 20, \"num_wall\": 15, \"num_enemies\": 7, \"time_countdown\": 300, \"n_retries_allowed\": 3}",
                    "token_usage": {
                        "completion_tokens": 58,
                        "prompt_tokens": 395,
                        "total_tokens": 453
                    }
                },
                {
                    "prompt": "Create Map for the Level\n\n---\n\nFollow the following format.\n\nLevel: Level\nMap: Map. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Level\": {\"properties\": {\"name\": {\"description\": \"Name of the Level\", \"title\": \"Name\", \"type\": \"string\"}, \"difficulty\": {\"description\": \"Difficulty of the Level\", \"title\": \"Difficulty\", \"type\": \"integer\"}, \"width\": {\"description\": \"Width of the Map\", \"title\": \"Width\", \"type\": \"integer\"}, \"height\": {\"description\": \"Height of the Map\", \"title\": \"Height\", \"type\": \"integer\"}, \"num_wall\": {\"description\": \"Number of Walls in the Map\", \"title\": \"Num Wall\", \"type\": \"integer\"}, \"num_enemies\": {\"description\": \"Number of Enemies in the Map\", \"title\": \"Num Enemies\", \"type\": \"integer\"}, \"time_countdown\": {\"description\": \"Time Countdown of the Level\", \"title\": \"Time Countdown\", \"type\": \"integer\"}, \"n_retries_allowed\": {\"description\": \"Number of Retries Allowed\", \"title\": \"N Retries Allowed\", \"type\": \"integer\"}}, \"required\": [\"name\", \"difficulty\", \"width\", \"height\", \"num_wall\", \"num_enemies\", \"time_countdown\", \"n_retries_allowed\"], \"title\": \"Level\", \"type\": \"object\"}, \"Position\": {\"properties\": {\"x\": {\"description\": \"X Coordinate\", \"title\": \"X\", \"type\": \"integer\"}, \"y\": {\"description\": \"Y Coordinate\", \"title\": \"Y\", \"type\": \"integer\"}}, \"required\": [\"x\", \"y\"], \"title\": \"Position\", \"type\": \"object\"}, \"Wall\": {\"properties\": {\"start_pos\": {\"allOf\": [{\"$ref\": \"#/$defs/Position\"}], \"description\": \"Start Position of the Wall\"}, \"end_pos\": {\"allOf\": [{\"$ref\": \"#/$defs/Position\"}], \"description\": \"End Position of the Wall\"}}, \"required\": [\"start_pos\", \"end_pos\"], \"title\": \"Wall\", \"type\": \"object\"}}, \"properties\": {\"level\": {\"allOf\": [{\"$ref\": \"#/$defs/Level\"}], \"description\": \"Level of the Map\"}, \"walls\": {\"description\": \"Walls in the Map Other than Edges\", \"items\": {\"$ref\": \"#/$defs/Wall\"}, \"title\": \"Walls\", \"type\": \"array\"}, \"small_obstacles\": {\"description\": \"Obstacles in the Map\", \"items\": {\"$ref\": \"#/$defs/Position\"}, \"title\": \"Small Obstacles\", \"type\": \"array\"}, \"enemies\": {\"description\": \"Enemies in the Map\", \"items\": {\"$ref\": \"#/$defs/Position\"}, \"title\": \"Enemies\", \"type\": \"array\"}, \"player_pos\": {\"allOf\": [{\"$ref\": \"#/$defs/Position\"}], \"description\": \"Player Position in the Map\"}}, \"required\": [\"level\", \"walls\", \"small_obstacles\", \"enemies\", \"player_pos\"], \"title\": \"Map\", \"type\": \"object\"}\n\n---\n\nLevel: {\"name\":\"Level 2\",\"difficulty\":1,\"width\":20,\"height\":20,\"num_wall\":15,\"num_enemies\":7,\"time_countdown\":300,\"n_retries_allowed\":3}\nMap:",
                    "output": "{\n  \"level\": {\n    \"name\": \"Level 2\",\n    \"difficulty\": 1,\n    \"width\": 20,\n    \"height\": 20,\n    \"num_wall\": 15,\n    \"num_enemies\": 7,\n    \"time_countdown\": 300,\n    \"n_retries_allowed\": 3\n  },\n  \"walls\": [\n    {\n      \"start_pos\": {\n        \"x\": 5,\n        \"y\": 5\n      },\n      \"end_pos\": {\n        \"x\": 5,\n        \"y\": 15\n      }\n    },\n    {\n      \"start_pos\": {\n        \"x\": 10,\n        \"y\": 5\n      },\n      \"end_pos\": {\n        \"x\": 10,\n        \"y\": 15\n      }\n    },\n    {\n      \"start_pos\": {\n        \"x\": 15,\n        \"y\": 5\n      },\n      \"end_pos\": {\n        \"x\": 15,\n        \"y\": 15\n      }\n    }\n  ],\n  \"small_obstacles\": [\n    {\n      \"x\": 7,\n      \"y\": 7\n    },\n    {\n      \"x\": 13,\n      \"y\": 13\n    }\n  ],\n  \"enemies\": [\n    {\n      \"x\": 6,\n      \"y\": 6\n    },\n    {\n      \"x\": 14,\n      \"y\": 14\n    }\n  ],\n  \"player_pos\": {\n    \"x\": 1,\n    \"y\": 1\n  }\n}",
                    "token_usage": {
                        "completion_tokens": 337,
                        "prompt_tokens": 733,
                        "total_tokens": 1070
                    }
                }
            ],
            "output": "name='Level 2' difficulty=1 width=20 height=20 num_wall=15 num_enemies=7 time_countdown=300 n_retries_allowed=3\nBBBBBBBBBBBBBBBBBBBBBB\nB....................B\nB.P..................B\nB....................B\nB....................B\nB....................B\nB.....B....B....B....B\nB.....BE...B....B....B\nB.....B.B..B....B....B\nB.....B....B....B....B\nB.....B....B....B....B\nB.....B....B....B....B\nB.....B....B....B....B\nB.....B....B....B....B\nB.....B....B..B.B....B\nB.....B....B...EB....B\nB.....B....B....B....B\nB....................B\nB....................B\nB....................B\nB....................B\nBBBBBBBBBBBBBBBBBBBBBB"
        }
    },
    "wikipedia": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\nExample of ReAct Process (example) (dict) = {\"question\": \"What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?\", \"react_process\": [ThoughtActionObservation(thought_action=ThoughtAction(thought=\"I need to search Colorado orogeny, find the area that the eastern sector of the Colorado ...\", action_type=ActionType.Search, action_info=\"Colorado orogeny\"), observation=\"The Colorado orogeny was an episode of mountain building (an orogeny) ...\"), ThoughtActionObservation(thought_action=ThoughtAction(thought=\"It does not mention the eastern sector. So I need to look up eastern sector.\", action_type=ActionType.Search, action_info=\"eastern sector of the Colorado orogeny\"), observation=\"The eastern sector of the Colorado orogeny extends into the High Plains.... \")], \"final_thought_action\": ThoughtAction(thought=\"High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft\", action_type=ActionType.Finish, action_info=\"1,800 to 7,000 ft\")}\n\n[Context]\n\n\n[Inputs Information]\nQuestion (question) (str) = \"Where is Apple Headquaters located?\"\nPrevious Thought, Action and Observation (prev_thought_action_observation) (list) = []\n\n[Output Information]\nThought & Action (ThoughtAction)\n\n[Type Explanations]\nThought and Action (ThoughtAction) (obj) eg:- ThoughtAction(thought=str, action_type=ActionType, action_info=str) -> (thought) (str), (action_type) (ActionType), (action_info) (str)\nAction Type (ActionType) (Enum) eg:- ActionType.Finish -> (Search) (EnumItem), (Finish) (EnumItem)\n\n[Action]\nGet Next Thought Action\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "ThoughtAction(thought=\"I need to search for the location of Apple's headquarters.\", action_type=ActionType.Search, action_info=\"Apple headquarters location\")",
                    "token_usage": {
                        "completion_tokens": 31,
                        "prompt_tokens": 480,
                        "total_tokens": 511
                    }
                },
                {
                    "prompt": "[Output]\nThoughtAction(thought=\"I need to search for the location of Apple's headquarters.\", action_type=ActionType.Search, action_info=\"Apple headquarters location\")\n\n[Previous Result You Provided]\nNone\n\n[Desired Output Type]\nThought & Action (ThoughtAction)\n\n[Type Explanations]\nThought and Action (ThoughtAction) (obj) eg:- ThoughtAction(thought=str, action_type=ActionType, action_info=str) -> (thought) (str), (action_type) (ActionType), (action_info) (str)\nAction Type (ActionType) (Enum) eg:- ActionType.Finish -> (Search) (EnumItem), (Finish) (EnumItem)\n\nAbove output is not in the desired Output Format/Type. Please provide the output in the desired type. Do not repeat the previously provided output.\nImportant: Do not provide the code or the methodology. Only provide\nthe output in the desired format.",
                    "output": "ThoughtAction(thought=\"I am planning to find out where Apple's headquarters are located.\", action_type=ActionType.Search, action_info=\"Location of Apple's headquarters\")",
                    "token_usage": {
                        "completion_tokens": 34,
                        "prompt_tokens": 198,
                        "total_tokens": 232
                    }
                },
                {
                    "prompt": "[Output]\nThoughtAction(thought=\"I am planning to find out where Apple's headquarters are located.\", action_type=ActionType.Search, action_info=\"Location of Apple's headquarters\")\n\n[Desired Output Type]\nThoughtAction\n\n[Type Explanations]\nThought and Action (ThoughtAction) (obj) eg:- ThoughtAction(thought=str, action_type=ActionType, action_info=str) -> (thought) (str), (action_type) (ActionType), (action_info) (str)\nAction Type (ActionType) (Enum) eg:- ActionType.Finish -> (Search) (EnumItem), (Finish) (EnumItem)\n\nCheck if the output is exactly in the desired Output Type. Important: Just say 'Yes' or 'No'.",
                    "output": "Yes",
                    "token_usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 162,
                        "total_tokens": 163
                    }
                }
            ],
            "output": ")"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "You will be given `question` and you will respond with `answer`.\n\nTo do this, you will interleave Thought, Action, and Observation steps.\n\nThought can reason about the current situation, and Action can be the following types:\n\n(1) Search[query], which takes a search query and returns summary from wikipedia\n(2) Finish[answer], which returns the final `answer` and finishes the task\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\nThought 1: next steps to take based on last observation\nAction 1: always either Search[query] or, when done, Finish[answer]\n\n---\n\nQuestion: Where is Apple Headquaters located?\nThought 1:",
                    "output": "I know that Apple's headquarters is located in Cupertino, California. There's no need to search for this information.\nAction 1: Finish[Apple's headquarters is located in Cupertino, California.]",
                    "token_usage": {
                        "completion_tokens": 39,
                        "prompt_tokens": 149,
                        "total_tokens": 188
                    }
                },
                {
                    "prompt": "You will be given `question` and you will respond with `answer`.\n\nTo do this, you will interleave Thought, Action, and Observation steps.\n\nThought can reason about the current situation, and Action can be the following types:\n\n(1) Search[query], which takes a search query and returns summary from wikipedia\n(2) Finish[answer], which returns the final `answer` and finishes the task\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\nThought 1: next steps to take based on last observation\nAction 1: always either Search[query] or, when done, Finish[answer]\n\n---\n\nQuestion: Who is Jason Mars?\nThought 1:",
                    "output": "I am not sure who Jason Mars is. I should look up this person to provide an accurate answer.\nAction 1: Search[\"Jason Mars\"]",
                    "token_usage": {
                        "completion_tokens": 30,
                        "prompt_tokens": 146,
                        "total_tokens": 176
                    }
                },
                {
                    "prompt": "You will be given `question` and you will respond with `answer`.\n\nTo do this, you will interleave Thought, Action, and Observation steps.\n\nThought can reason about the current situation, and Action can be the following types:\n\n(1) Search[query], which takes a search query and returns summary from wikipedia\n(2) Finish[answer], which returns the final `answer` and finishes the task\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nThought 1: next steps to take based on last observation\n\nAction 1: always either Search[query] or, when done, Finish[answer]\n\nObservation 1: observations based on action\n\nThought 2: next steps to take based on last observation\n\nAction 2: always either Search[query] or, when done, Finish[answer]\n\n---\n\nQuestion: Who is Jason Mars?\n\nThought 1: I am not sure who Jason Mars is. I should look up this person to provide an accurate answer.\n\nAction 1: Search[\"Jason Mars\"]\n\nObservation 1: Curly Wurly is a brand of chocolate bar manufactured by Cadbury and sold worldwide. It was launched in the UK in 1970. Its shape resembles three flattened, intertwined serpentine strings. The bar is made of chocolate-coated caramel.\n\nThought 2:",
                    "output": "The search results seem to be incorrect. They are about a chocolate bar, not Jason Mars. I should try the search again.\n\nAction 2: Search[\"Jason Mars biography\"]",
                    "token_usage": {
                        "completion_tokens": 36,
                        "prompt_tokens": 279,
                        "total_tokens": 315
                    }
                }
            ],
            "output": ""
        }
    }
}