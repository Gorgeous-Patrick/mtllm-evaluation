{
    "mcq_reason": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(question) (str) = \"It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\"\n(choices) (dict[str, str]) = {\"A\": \"08/29/2021\", \"B\": \"08/28/2021\", \"C\": \"08/29/1925\", \"D\": \"08/30/2021\", \"E\": \"05/25/2021\", \"F\": \"09/19/2021\"}\n\n[Output Information]\n(str)\n\n[Type Explanations]\n\n\n[Action]\nget_answer_key\n\nGenerate and return the output result(s) only, adhering to the provided Type in the following format. Perform the operation in a chain of thoughts.(Think Step by Step)\n\n[Chain of Thoughts] <Chain of Thoughts>\n[Output] <Result>",
                    "output": "[Chain of Thoughts]\nTo solve the problem:\n1. Determine the reference date from the question, which is \"Sept. 1st, 2021\".\n2. Calculate the date \"10 days ago\" from the reference date.\n3. Match the calculated date with the choices provided.\n\nStep-by-step calculation:\n- Reference date: September 1, 2021.\n- 10 days ago from September 1, 2021, is August 22, 2021.\n- Convert \"August 22, 2021\" to MM/DD/YYYY format, resulting in \"08/22/2021\".\n- Check the choices for a match. However, none of the choices match \"08/22/2021\". It seems there might be an issue with the choices or the question's interpretation.\n\n[Output] None of the provided choices match the correct date of \"08/22/2021\".",
                    "token_usage": {
                        "completion_tokens": 186,
                        "prompt_tokens": 246,
                        "total_tokens": 432
                    }
                }
            ],
            "output": ")\nNone of the provided choices match the correct date of \"08/22/2021\"."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Provide the Answer for the Given Question (A-F)\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nChoices: ${choices}\n\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\n\nAnswer: ${answer}\n\n---\n\nQuestion: It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\n\nChoices: (A) 08/29/2021 (B) 08/28/2021 (C) 08/29/1925 (D) 08/30/2021 (E) 05/25/2021 (F) 09/19/2021\n\nReasoning: Let's think step by step in order to",
                    "output": "Reasoning: Let's think step by step in order to determine the correct date 10 days before September 1, 2021. We start by understanding that if it was September 1st, 2021 a week ago, then today is September 8, 2021. To find the date 10 days before September 1, 2021, we subtract 10 days from September 1, 2021. \n\n1. September has 30 days, so subtracting 10 days from September 1st takes us into August.\n2. September 1 minus 1 day is August 31.\n3. Continuing to subtract the remaining 9 days from August 31, we get August 31 -",
                    "token_usage": {
                        "completion_tokens": 150,
                        "prompt_tokens": 164,
                        "total_tokens": 314
                    }
                },
                {
                    "prompt": "Provide the Answer for the Given Question (A-F)\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nChoices: ${choices}\n\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\n\nAnswer: ${answer}\n\n---\n\nQuestion: It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\n\nChoices: (A) 08/29/2021 (B) 08/28/2021 (C) 08/29/1925 (D) 08/30/2021 (E) 05/25/2021 (F) 09/19/2021\n\nReasoning: Let's think step by step in order to Reasoning: Let's think step by step in order to determine the correct date 10 days before September 1, 2021. We start by understanding that if it was September 1st, 2021 a week ago, then today is September 8, 2021. To find the date 10 days before September 1, 2021, we subtract 10 days from September 1, 2021. 1. September has 30 days, so subtracting 10 days from September 1st takes us into August. 2. September 1 minus 1 day is August 31. 3. Continuing to subtract the remaining 9 days from August 31, we get August 31 -\n\nAnswer:",
                    "output": "22 = August 22, 2021. Therefore, the date 10 days before September 1, 2021, is August 22, 2021.\n\nAnswer: None of the choices match the correct date calculated (August 22, 2021). All provided choices are incorrect based on the calculation.",
                    "token_usage": {
                        "completion_tokens": 65,
                        "prompt_tokens": 317,
                        "total_tokens": 382
                    }
                }
            ],
            "output": "Reasoning: Let's think step by step in order to determine the correct date 10 days before September 1, 2021. We start by understanding that if it was September 1st, 2021 a week ago, then today is September 8, 2021. To find the date 10 days before September 1, 2021, we subtract 10 days from September 1, 2021. \n\n1. September has 30 days, so subtracting 10 days from September 1st takes us into August.\n2. September 1 minus 1 day is August 31.\n3. Continuing to subtract the remaining 9 days from August 31, we get August 31 - 22 = August 22, 2021. Therefore, the date 10 days before September 1, 2021, is August 22, 2021.\n\nAnswer: None of the choices match the correct date calculated (August 22, 2021). All provided choices are incorrect based on the calculation."
        }
    },
    "personality_finder": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(name) (str) = \"Martin Luther King Jr.\"\n\n[Output Information]\n(Person)\n\n[Type Explanations]\n(Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> (full_name) (str), (yod) (int), (personality) (Personality)\n(Personality) (Enum) eg:- Personality.EXTROVERT -> (INTROVERT) (EnumItem), (EXTROVERT) (EnumItem)\n\n[Action]\nget_person_info\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Person(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)",
                    "token_usage": {
                        "completion_tokens": 27,
                        "prompt_tokens": 200,
                        "total_tokens": 227
                    }
                }
            ],
            "output": ")\nMartin Luther King Jr. was a Extrovert person who died in 1968"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information use common knowledge.\n\n---\n\nFollow the following format.\n\nName: Name of the Person\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Personality\": {\"enum\": [\"Introvert\", \"Extrovert\"], \"title\": \"Personality\", \"type\": \"string\"}}, \"properties\": {\"full_name\": {\"description\": \"Fullname of the Person\", \"title\": \"Full Name\", \"type\": \"string\"}, \"yod\": {\"description\": \"Year of Death\", \"title\": \"Yod\", \"type\": \"integer\"}, \"personality\": {\"allOf\": [{\"$ref\": \"#/$defs/Personality\"}], \"description\": \"Personality Type\"}}, \"required\": [\"full_name\", \"yod\", \"personality\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nName: Martin Luther King Jr.\nPerson:",
                    "output": "```json",
                    "token_usage": {
                        "completion_tokens": 36,
                        "prompt_tokens": 197,
                        "total_tokens": 233
                    }
                }
            ],
            "output": "Martin Luther King Jr. was an Extrovert person who died in 1968."
        }
    },
    "template": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(name) (str) = \"Bruno Mars\"\n\n[Output Information]\n(Singer)\n\n[Type Explanations]\n(Singer) (obj) eg:- Singer(name=str, age=int, top_2_songs=list[str]) -> (name) (str), (age) (int), (top_2_songs) (list[str])\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Singer(name='Bruno Mars', age=37, top_2_songs=['Uptown Funk', 'Just the Way You Are'])",
                    "token_usage": {
                        "completion_tokens": 32,
                        "prompt_tokens": 200,
                        "total_tokens": 232
                    }
                }
            ],
            "output": ")\nBruno Mars is 37 years old. His top 2 songs are ['Uptown Funk', 'Just the Way You Are']."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nName: name of the singer\nSinger: ${singer}. Respond with a single JSON object. JSON Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}\n\n---\n\nName: Bruno Mars\nSinger:",
                    "output": "```json",
                    "token_usage": {
                        "completion_tokens": 41,
                        "prompt_tokens": 173,
                        "total_tokens": 214
                    }
                }
            ],
            "output": "Bruno Mars is 37 years old. His top 2 songs are ['Uptown Funk', 'Just the Way You Are']."
        }
    },
    "text_to_type": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n(info) (str) = \"Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\"\n\n[Context]\n\n\n[Inputs Information]\n\n\n[Output Information]\n(Person)\n\n[Type Explanations]\n(Person) (obj) eg:- Person(name=str, age=int, employer=Employer, job=str) -> (name) (str), (age) (int), (employer) (Employer), (job) (str)\n(Employer) (obj) eg:- Employer(employer_name=str, location=str) -> (employer_name) (str), (location) (str)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Person(name=\"Alice\", age=21, employer=Employer(employer_name=\"LMQL Inc\", location=\"Zurich, Switzerland\"), job=\"engineer\")",
                    "token_usage": {
                        "completion_tokens": 37,
                        "prompt_tokens": 249,
                        "total_tokens": 286
                    }
                }
            ],
            "output": ")\nTheir name is Alice and she works in Zurich, Switzerland."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nInfo: Person Information\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Employer\": {\"properties\": {\"employer_name\": {\"description\": \"Employer Name\", \"title\": \"Employer Name\", \"type\": \"string\"}, \"location\": {\"description\": \"Location\", \"title\": \"Location\", \"type\": \"string\"}}, \"required\": [\"employer_name\", \"location\"], \"title\": \"Employer\", \"type\": \"object\"}}, \"properties\": {\"name\": {\"description\": \"Name\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"job\": {\"description\": \"Job\", \"title\": \"Job\", \"type\": \"string\"}, \"employer\": {\"allOf\": [{\"$ref\": \"#/$defs/Employer\"}], \"description\": \"Employer\"}}, \"required\": [\"name\", \"age\", \"job\", \"employer\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nInfo: Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\nPerson:",
                    "output": "{\n  \"name\": \"Alice\",\n  \"age\": 21,\n  \"job\": \"engineer\",\n  \"employer\": {\n    \"employer_name\": \"LMQL Inc\",\n    \"location\": \"Zurich, Switzerland\"\n  }\n}",
                    "token_usage": {
                        "completion_tokens": 52,
                        "prompt_tokens": 266,
                        "total_tokens": 318
                    }
                }
            ],
            "output": "Their name is Alice and she works in Zurich, Switzerland."
        }
    },
    "taskman": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(description) (str) = \"Have some sleep\"\n\n[Output Information]\n(Task)\n\n[Type Explanations]\n(Task) (obj) eg:- Task(description=str, time_in_min=int, priority_out_of_10=int) -> (description) (str), (time_in_min) (int), (priority_out_of_10) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The input provides a description of a task, which is \"Have some sleep\". The time in minutes and priority out of 10 are not provided and need to be estimated. A typical good night's sleep is around 480 minutes (8 hours). Considering the importance of sleep for health, the priority can be reasonably set as 9 out of 10.\n\n[Output] (\"Have some sleep\", 480, 9)",
                    "token_usage": {
                        "completion_tokens": 90,
                        "prompt_tokens": 207,
                        "total_tokens": 297
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(description) (str) = \"Enjoy a better weekend with my girlfriend\"\n\n[Output Information]\n(Task)\n\n[Type Explanations]\n(Task) (obj) eg:- Task(description=str, time_in_min=int, priority_out_of_10=int) -> (description) (str), (time_in_min) (int), (priority_out_of_10) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The input \"Enjoy a better weekend with my girlfriend\" suggests a personal leisure activity which typically would span over a weekend, hence estimating about 48 hours, converted into minutes gives 2880 minutes. The priority of enjoying a weekend with a significant other is subjective but generally high for personal well-being, so it's rated as 8 out of 10.\n\n[Output] (\"Enjoy a better weekend with my girlfriend\", 2880, 8)",
                    "token_usage": {
                        "completion_tokens": 95,
                        "prompt_tokens": 211,
                        "total_tokens": 306
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(description) (str) = \"Work on Jaseci Project\"\n\n[Output Information]\n(Task)\n\n[Type Explanations]\n(Task) (obj) eg:- Task(description=str, time_in_min=int, priority_out_of_10=int) -> (description) (str), (time_in_min) (int), (priority_out_of_10) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Output] Task(description=\"Work on Jaseci Project\", time_in_min=120, priority_out_of_10=8)",
                    "token_usage": {
                        "completion_tokens": 27,
                        "prompt_tokens": 210,
                        "total_tokens": 237
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(description) (str) = \"Teach EECS 281 Students\"\n\n[Output Information]\n(Task)\n\n[Type Explanations]\n(Task) (obj) eg:- Task(description=str, time_in_min=int, priority_out_of_10=int) -> (description) (str), (time_in_min) (int), (priority_out_of_10) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] EECS 281 is an advanced level course that requires considerable effort and understanding from the students. Typically, teaching such a course would take a substantial amount of time per session, possibly around 90 minutes. Given the complexity and importance of the subject matter, the priority for preparing and delivering content effectively would be relatively high.\n\n[Output] Task(description=\"Teach EECS 281 Students\", time_in_min=90, priority_out_of_10=8)",
                    "token_usage": {
                        "completion_tokens": 96,
                        "prompt_tokens": 211,
                        "total_tokens": 307
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\n(description) (str) = \"Enjoy family time with my parents\"\n\n[Output Information]\n(Task)\n\n[Type Explanations]\n(Task) (obj) eg:- Task(description=str, time_in_min=int, priority_out_of_10=int) -> (description) (str), (time_in_min) (int), (priority_out_of_10) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning]\nThe task involves spending quality time with family, which is typically considered important but not urgent. I chose 120 minutes (2 hours) as a reasonable amount of time for a significant family interaction, such as a meal together or a shared activity. The priority is set to 7 out of 10, reflecting the importance of family time in maintaining strong family bonds, yet recognizing that it might not be as critical as immediate personal or professional obligations.\n\n[Output]\nTask(description=\"Enjoy family time with my parents\", time_in_min=120, priority_out_of_10=7)",
                    "token_usage": {
                        "completion_tokens": 120,
                        "prompt_tokens": 210,
                        "total_tokens": 330
                    }
                }
            ],
            "output": ")"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Have some sleep\nTask:",
                    "output": "{\n  \"description\": \"Ensure to get a full night's sleep to maintain optimal health and cognitive function.\",\n  \"time\": 480,\n  \"priority\": 10\n}",
                    "token_usage": {
                        "completion_tokens": 37,
                        "prompt_tokens": 159,
                        "total_tokens": 196
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy a better weekend with my girlfriend\nTask:",
                    "output": "{\n  \"description\": \"Plan a weekend getaway with activities that both enjoy, including booking accommodations and creating an itinerary of relaxing and fun activities.\",\n  \"time\": 240,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 44,
                        "prompt_tokens": 163,
                        "total_tokens": 207
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Work on Jaseci Project\nTask:",
                    "output": "{\n  \"description\": \"Work on the Jaseci project involves developing and optimizing the core engine, implementing new features, and ensuring robustness through testing.\",\n  \"time\": 120,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 47,
                        "prompt_tokens": 162,
                        "total_tokens": 209
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Teach EECS 281 Students\nTask:",
                    "output": "{\n  \"description\": \"Teach EECS 281 students the fundamentals of data structures and algorithms, including complexity analysis, sorting algorithms, and advanced data structures like graphs and trees.\",\n  \"time\": 120,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 52,
                        "prompt_tokens": 162,
                        "total_tokens": 214
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy family time with my parents\nTask:",
                    "output": "{\n  \"description\": \"Spend quality time with parents, engaging in activities such as dining out, watching a movie, or simply having a heartfelt conversation at home.\",\n  \"time\": 180,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 49,
                        "prompt_tokens": 162,
                        "total_tokens": 211
                    }
                }
            ],
            "output": "[Task(description=\"Ensure to get a full night's sleep to maintain optimal health and cognitive function.\", time=480, priority=10), Task(description='Plan a weekend getaway with activities that both enjoy, including booking accommodations and creating an itinerary of relaxing and fun activities.', time=240, priority=8), Task(description='Work on the Jaseci project involves developing and optimizing the core engine, implementing new features, and ensuring robustness through testing.', time=120, priority=8), Task(description='Teach EECS 281 students the fundamentals of data structures and algorithms, including complexity analysis, sorting algorithms, and advanced data structures like graphs and trees.', time=120, priority=8), Task(description='Spend quality time with parents, engaging in activities such as dining out, watching a movie, or simply having a heartfelt conversation at home.', time=180, priority=8)]"
        }
    }
}