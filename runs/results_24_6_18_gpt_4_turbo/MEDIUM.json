{
    "mcq_reason": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nQuestion (question) (str) = \"It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\"\nAnswer Choices (choices) (dict[str, str]) = {\"A\": \"08/29/2021\", \"B\": \"08/28/2021\", \"C\": \"08/29/1925\", \"D\": \"08/30/2021\", \"E\": \"05/25/2021\", \"F\": \"09/19/2021\"}\n\n[Output Information]\nAnswer (A-F) (str)\n\n[Type Explanations]\n\n\n[Action]\nProvide the Answer for the Given Question (A-F)\n\nGenerate and return the output result(s) only, adhering to the provided Type in the following format. Perform the operation in a chain of thoughts.(Think Step by Step)\n\n[Chain of Thoughts] <Chain of Thoughts>\n[Output] <Result>",
                    "output": "[Chain of Thoughts]\n1. The question states that it was September 1st, 2021 a week ago, which implies the current date is September 8th, 2021.\n2. The question asks for the date 10 days prior to September 8th, 2021.\n3. Calculating 10 days before September 8th, 2021 results in August 29th, 2021.\n4. Review the answer choices to find the corresponding date in MM/DD/YYYY format.\n5. The correct answer is \"08/29/2021\".\n\n[Output] A",
                    "token_usage": {
                        "completion_tokens": 124,
                        "prompt_tokens": 264,
                        "total_tokens": 388
                    }
                }
            ],
            "output": ")\nA"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Provide the Answer for the Given Question (A-F)\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nChoices: ${choices}\n\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\n\nAnswer: ${answer}\n\n---\n\nQuestion: It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\n\nChoices: (A) 08/29/2021 (B) 08/28/2021 (C) 08/29/1925 (D) 08/30/2021 (E) 05/25/2021 (F) 09/19/2021\n\nReasoning: Let's think step by step in order to",
                    "output": "Reasoning: Let's think step by step in order to determine the correct date 10 days before September 1, 2021. We start by understanding that if it was September 1st, 2021 a week ago, then today is September 8, 2021. To find the date 10 days before September 1, 2021, we subtract 10 days from September 1, 2021. \n\n1. September has 30 days, so subtracting 10 days from September 1st takes us into August.\n2. September 1 minus 1 day is August 31.\n3. Continuing to subtract the remaining 9 days from August 31, we get August 31 -",
                    "token_usage": {
                        "completion_tokens": 150,
                        "prompt_tokens": 164,
                        "total_tokens": 314
                    }
                },
                {
                    "prompt": "Provide the Answer for the Given Question (A-F)\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nChoices: ${choices}\n\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\n\nAnswer: ${answer}\n\n---\n\nQuestion: It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\n\nChoices: (A) 08/29/2021 (B) 08/28/2021 (C) 08/29/1925 (D) 08/30/2021 (E) 05/25/2021 (F) 09/19/2021\n\nReasoning: Let's think step by step in order to Reasoning: Let's think step by step in order to determine the correct date 10 days before September 1, 2021. We start by understanding that if it was September 1st, 2021 a week ago, then today is September 8, 2021. To find the date 10 days before September 1, 2021, we subtract 10 days from September 1, 2021. 1. September has 30 days, so subtracting 10 days from September 1st takes us into August. 2. September 1 minus 1 day is August 31. 3. Continuing to subtract the remaining 9 days from August 31, we get August 31 -\n\nAnswer:",
                    "output": "22 = August 22, 2021. Therefore, the date 10 days before September 1, 2021, is August 22, 2021.\n\nAnswer: None of the choices match the correct date calculated (August 22, 2021). All provided choices are incorrect based on the calculation.",
                    "token_usage": {
                        "completion_tokens": 65,
                        "prompt_tokens": 317,
                        "total_tokens": 382
                    }
                }
            ],
            "output": "Reasoning: Let's think step by step in order to determine the correct date 10 days before September 1, 2021. We start by understanding that if it was September 1st, 2021 a week ago, then today is September 8, 2021. To find the date 10 days before September 1, 2021, we subtract 10 days from September 1, 2021. \n\n1. September has 30 days, so subtracting 10 days from September 1st takes us into August.\n2. September 1 minus 1 day is August 31.\n3. Continuing to subtract the remaining 9 days from August 31, we get August 31 - 22 = August 22, 2021. Therefore, the date 10 days before September 1, 2021, is August 22, 2021.\n\nAnswer: None of the choices match the correct date calculated (August 22, 2021). All provided choices are incorrect based on the calculation."
        }
    },
    "personality_finder": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nName of the Person (name) (str) = \"Martin Luther King Jr.\"\n\n[Output Information]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\n[Action]\nGet Person Information use common knowledge\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "Person(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)",
                    "token_usage": {
                        "completion_tokens": 24,
                        "prompt_tokens": 245,
                        "total_tokens": 269
                    }
                },
                {
                    "prompt": "[Output]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Previous Result You Provided]\nNone\n\n[Desired Output Type]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\nAbove output is not in the desired Output Format/Type. Please provide the output in the desired type. Do not repeat the previously provided output.\nImportant: Do not provide the code or the methodology. Only provide\nthe output in the desired format.",
                    "output": "Person(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)",
                    "token_usage": {
                        "completion_tokens": 24,
                        "prompt_tokens": 220,
                        "total_tokens": 244
                    }
                },
                {
                    "prompt": "[Output]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Desired Output Type]\nPerson\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\nCheck if the output is exactly in the desired Output Type. Important: Just say 'Yes' or 'No'.",
                    "output": "No",
                    "token_usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 183,
                        "total_tokens": 184
                    }
                },
                {
                    "prompt": "[Output]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Previous Result You Provided]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Desired Output Type]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\nAbove output is not in the desired Output Format/Type. Please provide the output in the desired type. Do not repeat the previously provided output.\nImportant: Do not provide the code or the methodology. Only provide\nthe output in the desired format.",
                    "output": "Person(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)",
                    "token_usage": {
                        "completion_tokens": 24,
                        "prompt_tokens": 242,
                        "total_tokens": 266
                    }
                },
                {
                    "prompt": "[Output]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Desired Output Type]\nPerson\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\nCheck if the output is exactly in the desired Output Type. Important: Just say 'Yes' or 'No'.",
                    "output": "No",
                    "token_usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 183,
                        "total_tokens": 184
                    }
                },
                {
                    "prompt": "[Output]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Previous Result You Provided]\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n\n[Desired Output Type]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\nAbove output is not in the desired Output Format/Type. Please provide the output in the desired type. Do not repeat the previously provided output.\nImportant: Do not provide the code or the methodology. Only provide\nthe output in the desired format.",
                    "output": "```python\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n```",
                    "token_usage": {
                        "completion_tokens": 28,
                        "prompt_tokens": 242,
                        "total_tokens": 270
                    }
                },
                {
                    "prompt": "[Output]\n```python\nPerson(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)\n```\n\n[Desired Output Type]\nPerson\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\nCheck if the output is exactly in the desired Output Type. Important: Just say 'Yes' or 'No'.",
                    "output": "Yes",
                    "token_usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 188,
                        "total_tokens": 189
                    }
                }
            ],
            "output": ")"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information use common knowledge.\n\n---\n\nFollow the following format.\n\nName: Name of the Person\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Personality\": {\"enum\": [\"Introvert\", \"Extrovert\"], \"title\": \"Personality\", \"type\": \"string\"}}, \"properties\": {\"full_name\": {\"description\": \"Fullname of the Person\", \"title\": \"Full Name\", \"type\": \"string\"}, \"yod\": {\"description\": \"Year of Death\", \"title\": \"Yod\", \"type\": \"integer\"}, \"personality\": {\"allOf\": [{\"$ref\": \"#/$defs/Personality\"}], \"description\": \"Personality Type\"}}, \"required\": [\"full_name\", \"yod\", \"personality\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nName: Martin Luther King Jr.\nPerson:",
                    "output": "```json",
                    "token_usage": {
                        "completion_tokens": 36,
                        "prompt_tokens": 197,
                        "total_tokens": 233
                    }
                }
            ],
            "output": "Martin Luther King Jr. was an Extrovert person who died in 1968."
        }
    },
    "template": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nName of the Singer (name) (str) = \"Bruno Mars\"\n\n[Output Information]\nSinger (Singer)\n\n[Type Explanations]\nSinger (Singer) (obj) eg:- Singer(name=str, age=int, top_songs=list[str]) -> Name of the Singer (name) (str), Age (age) (int), His/Her's Top 2 Songs (top_songs) (list[str])\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Singer(name=\"Bruno Mars\", age=37, top_songs=[\"Uptown Funk\", \"Just the Way You Are\"])",
                    "token_usage": {
                        "completion_tokens": 30,
                        "prompt_tokens": 220,
                        "total_tokens": 250
                    }
                }
            ],
            "output": ")\nBruno Mars is 37 years old. His top 2 songs are ['Uptown Funk', 'Just the Way You Are']."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nName: name of the singer\nSinger: ${singer}. Respond with a single JSON object. JSON Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}\n\n---\n\nName: Bruno Mars\nSinger:",
                    "output": "```json",
                    "token_usage": {
                        "completion_tokens": 41,
                        "prompt_tokens": 173,
                        "total_tokens": 214
                    }
                }
            ],
            "output": "Bruno Mars is 37 years old. His top 2 songs are ['Uptown Funk', 'Just the Way You Are']."
        }
    },
    "text_to_type": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\nPerson's Information (info) (str) = \"Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\"\n\n[Context]\n\n\n[Inputs Information]\n\n\n[Output Information]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(name=str, age=int, employer=Employer, job=str) -> Name (name) (str), Age (age) (int), Employer (employer) (Employer), Job (job) (str)\nEmployer (Employer) (obj) eg:- Employer(employer_name=str, location=str) -> Employer Name (employer_name) (str), Location (location) (str)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Person(name=\"Alice\", age=21, employer=Employer(employer_name=\"LMQL Inc\", location=\"Zurich, Switzerland\"), job=\"engineer\")",
                    "token_usage": {
                        "completion_tokens": 37,
                        "prompt_tokens": 266,
                        "total_tokens": 303
                    }
                }
            ],
            "output": ")\nTheir name is Alice and she works in Zurich, Switzerland."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nInfo: Person Information\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Employer\": {\"properties\": {\"employer_name\": {\"description\": \"Employer Name\", \"title\": \"Employer Name\", \"type\": \"string\"}, \"location\": {\"description\": \"Location\", \"title\": \"Location\", \"type\": \"string\"}}, \"required\": [\"employer_name\", \"location\"], \"title\": \"Employer\", \"type\": \"object\"}}, \"properties\": {\"name\": {\"description\": \"Name\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"job\": {\"description\": \"Job\", \"title\": \"Job\", \"type\": \"string\"}, \"employer\": {\"allOf\": [{\"$ref\": \"#/$defs/Employer\"}], \"description\": \"Employer\"}}, \"required\": [\"name\", \"age\", \"job\", \"employer\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nInfo: Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\nPerson:",
                    "output": "{\n  \"name\": \"Alice\",\n  \"age\": 21,\n  \"job\": \"engineer\",\n  \"employer\": {\n    \"employer_name\": \"LMQL Inc\",\n    \"location\": \"Zurich, Switzerland\"\n  }\n}",
                    "token_usage": {
                        "completion_tokens": 52,
                        "prompt_tokens": 266,
                        "total_tokens": 318
                    }
                }
            ],
            "output": "Their name is Alice and she works in Zurich, Switzerland."
        }
    },
    "taskman": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Have some sleep\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Have some sleep\" does not specify the estimated time or priority, so it needs to be filled in with accurate information.\n[Output] Task(description=\"Have some sleep\", time=480, priority=8)",
                    "token_usage": {
                        "completion_tokens": 49,
                        "prompt_tokens": 248,
                        "total_tokens": 297
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Enjoy a better weekend with my girlfriend\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Enjoy a better weekend with my girlfriend\" can be transformed into a Task object by determining an estimated time and priority level for it.\n[Output] Task(description=\"Enjoy a better weekend with my girlfriend\", time=180, priority=8)",
                    "token_usage": {
                        "completion_tokens": 55,
                        "prompt_tokens": 252,
                        "total_tokens": 307
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Work on Jaseci Project\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The input information provided is \"Work on Jaseci Project\", which needs to be turned into a task object with a description, time, and priority.\n[Output] Task(description=\"Work on Jaseci Project\", time=120, priority=8)",
                    "token_usage": {
                        "completion_tokens": 56,
                        "prompt_tokens": 251,
                        "total_tokens": 307
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Teach EECS 281 Students\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Teach EECS 281 Students\" requires preparation, teaching time, and possibly grading. It is a high-priority task. \n[Output] Task(description=\"Teach EECS 281 Students\", time=120, priority=9)",
                    "token_usage": {
                        "completion_tokens": 56,
                        "prompt_tokens": 252,
                        "total_tokens": 308
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Enjoy family time with my parents\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Enjoy family time with my parents\" can be represented as a Task object with the description \"Enjoy family time with my parents\", an estimated time of 120 minutes, and a priority of 8.\n[Output] Task(description=\"Enjoy family time with my parents\", time=120, priority=8)",
                    "token_usage": {
                        "completion_tokens": 68,
                        "prompt_tokens": 251,
                        "total_tokens": 319
                    }
                }
            ],
            "output": ")\n[Task(description='Have some sleep', time=480, priority=8), Task(description='Enjoy a better weekend with my girlfriend', time=180, priority=8), Task(description='Work on Jaseci Project', time=120, priority=8), Task(description='Teach EECS 281 Students', time=120, priority=9), Task(description='Enjoy family time with my parents', time=120, priority=8)]"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Have some sleep\nTask:",
                    "output": "{\n  \"description\": \"Ensure to get a full night's sleep to maintain optimal health and cognitive function.\",\n  \"time\": 480,\n  \"priority\": 10\n}",
                    "token_usage": {
                        "completion_tokens": 37,
                        "prompt_tokens": 159,
                        "total_tokens": 196
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy a better weekend with my girlfriend\nTask:",
                    "output": "{\n  \"description\": \"Plan a weekend getaway with activities that both enjoy, including booking accommodations and creating an itinerary of relaxing and fun activities.\",\n  \"time\": 240,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 44,
                        "prompt_tokens": 163,
                        "total_tokens": 207
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Work on Jaseci Project\nTask:",
                    "output": "{\n  \"description\": \"Work on the Jaseci project involves developing and optimizing the core engine, implementing new features, and ensuring robustness through testing.\",\n  \"time\": 120,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 47,
                        "prompt_tokens": 162,
                        "total_tokens": 209
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Teach EECS 281 Students\nTask:",
                    "output": "{\n  \"description\": \"Teach EECS 281 students the fundamentals of data structures and algorithms, including complexity analysis, sorting algorithms, and advanced data structures like graphs and trees.\",\n  \"time\": 120,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 52,
                        "prompt_tokens": 162,
                        "total_tokens": 214
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy family time with my parents\nTask:",
                    "output": "{\n  \"description\": \"Spend quality time with parents, engaging in activities such as dining out, watching a movie, or simply having a heartfelt conversation at home.\",\n  \"time\": 180,\n  \"priority\": 8\n}",
                    "token_usage": {
                        "completion_tokens": 49,
                        "prompt_tokens": 162,
                        "total_tokens": 211
                    }
                }
            ],
            "output": "[Task(description=\"Ensure to get a full night's sleep to maintain optimal health and cognitive function.\", time=480, priority=10), Task(description='Plan a weekend getaway with activities that both enjoy, including booking accommodations and creating an itinerary of relaxing and fun activities.', time=240, priority=8), Task(description='Work on the Jaseci project involves developing and optimizing the core engine, implementing new features, and ensuring robustness through testing.', time=120, priority=8), Task(description='Teach EECS 281 students the fundamentals of data structures and algorithms, including complexity analysis, sorting algorithms, and advanced data structures like graphs and trees.', time=120, priority=8), Task(description='Spend quality time with parents, engaging in activities such as dining out, watching a movie, or simply having a heartfelt conversation at home.', time=180, priority=8)]"
        }
    }
}