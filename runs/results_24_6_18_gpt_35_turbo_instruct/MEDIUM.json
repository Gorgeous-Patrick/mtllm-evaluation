{
    "mcq_reason": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nQuestion (question) (str) = \"It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\"\nAnswer Choices (choices) (dict[str, str]) = {\"A\": \"08/29/2021\", \"B\": \"08/28/2021\", \"C\": \"08/29/1925\", \"D\": \"08/30/2021\", \"E\": \"05/25/2021\", \"F\": \"09/19/2021\"}\n\n[Output Information]\nAnswer (A-F) (str)\n\n[Type Explanations]\n\n\n[Action]\nProvide the Answer for the Given Question (A-F)\n\nGenerate and return the output result(s) only, adhering to the provided Output Type in the following format. Perform the operation in a chain of thoughts.(Think Step by Step)\n\n[Chain of Thoughts] <Chain of Thoughts>\n[Output] <Result>\n\n---\n\n[Chain of Thoughts] Lets Think Step by Step,\n1.",
                    "output": "Convert the given date to a datetime object\n2. Subtract 10 days from the datetime object\n3. Convert the resulting datetime object back to a string in the format MM/DD/YYYY\n4. Check the answer choices and return the corresponding letter for the correct date\n\n[Output] A",
                    "token_usage": {
                        "completion_tokens": 58,
                        "prompt_tokens": 272,
                        "total_tokens": 330
                    }
                }
            ],
            "output": ")\nA"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Provide the Answer for the Given Question (A-F)\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nChoices: ${choices}\n\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\n\nAnswer: ${answer}\n\n---\n\nQuestion: It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\n\nChoices: (A) 08/29/2021 (B) 08/28/2021 (C) 08/29/1925 (D) 08/30/2021 (E) 05/25/2021 (F) 09/19/2021\n\nReasoning: Let's think step by step in order to",
                    "output": "find the date 10 days ago. First, we need to subtract 10 from the day, which gives us 21. Then, we need to subtract 1 from the month, which gives us 08. Finally, we need to subtract 2021 from the year, which gives us 1925. Therefore, the date 10 days ago is 08/29/1925.\n\nAnswer: (C) 08/29/1925",
                    "token_usage": {
                        "completion_tokens": 93,
                        "prompt_tokens": 157,
                        "total_tokens": 250
                    }
                }
            ],
            "output": "find the date 10 days ago. First, we need to subtract 10 from the day, which gives us 21. Then, we need to subtract 1 from the month, which gives us 08. Finally, we need to subtract 2021 from the year, which gives us 1925. Therefore, the date 10 days ago is 08/29/1925. (C) 08/29/1925"
        }
    },
    "personality_finder": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nName of the Person (name) (str) = \"Martin Luther King Jr.\"\n\n[Output Information]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\n[Action]\nGet Person Information use common knowledge\nGenerate and return the output result(s) only, adhering to the provided Output Type in the following format\n\n[Output] <result>\n\n---\n\n[Output]",
                    "output": "[Output] Person(name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)",
                    "token_usage": {
                        "completion_tokens": 23,
                        "prompt_tokens": 243,
                        "total_tokens": 266
                    }
                }
            ],
            "output": ")"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information use common knowledge.\n\n---\n\nFollow the following format.\n\nName: Name of the Person\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Personality\": {\"enum\": [\"Introvert\", \"Extrovert\"], \"title\": \"Personality\", \"type\": \"string\"}}, \"properties\": {\"full_name\": {\"description\": \"Fullname of the Person\", \"title\": \"Full Name\", \"type\": \"string\"}, \"yod\": {\"description\": \"Year of Death\", \"title\": \"Yod\", \"type\": \"integer\"}, \"personality\": {\"allOf\": [{\"$ref\": \"#/$defs/Personality\"}], \"description\": \"Personality Type\"}}, \"required\": [\"full_name\", \"yod\", \"personality\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nName: Martin Luther King Jr.\nPerson:",
                    "output": "{\"full_name\": \"Martin Luther King Jr.\", \"yod\": 1968, \"personality\": \"Extrovert\"}",
                    "token_usage": {
                        "completion_tokens": 27,
                        "prompt_tokens": 190,
                        "total_tokens": 217
                    }
                }
            ],
            "output": "Martin Luther King Jr. was an Extrovert person who died in 1968."
        }
    },
    "template": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nName of the Singer (name) (str) = \"Bruno Mars\"\n\n[Output Information]\nSinger (Singer)\n\n[Type Explanations]\nSinger (Singer) (obj) eg:- Singer(name=str, age=int, top_songs=list[str]) -> Name of the Singer (name) (str), Age (age) (int), His/Her's Top 2 Songs (top_songs) (list[str])\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Output Type in the following format\n\n[Output] <result>\n\n---\n\n[Output]",
                    "output": "[Output] Singer(name=\"Bruno Mars\", age=35, top_songs=[\"Just the Way You Are\", \"Locked Out of Heaven\"])",
                    "token_usage": {
                        "completion_tokens": 27,
                        "prompt_tokens": 218,
                        "total_tokens": 245
                    }
                }
            ],
            "output": ")\nBruno Mars is 35 years old. His top 2 songs are ['Just the Way You Are', 'Locked Out of Heaven']."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nName: name of the singer\nSinger: ${singer}. Respond with a single JSON object. JSON Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}\n\n---\n\nName: Bruno Mars\nSinger:",
                    "output": "${singer}. Respond with a single JSON object. JSON Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}",
                    "token_usage": {
                        "completion_tokens": 150,
                        "prompt_tokens": 166,
                        "total_tokens": 316
                    }
                },
                {
                    "prompt": "Make a very succinct json object that validates with the following schema\n\n---\n\nFollow the following format.\n\nJson Schema: ${json_schema}\nJson Object: ${json_object}\n\n---\n\nJson Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}\nJson Object:",
                    "output": "{\"name\": \"Adele\", \"age\": 33, \"top_songs\": [\"Hello\", \"Someone Like You\"]}",
                    "token_usage": {
                        "completion_tokens": 27,
                        "prompt_tokens": 163,
                        "total_tokens": 190
                    }
                },
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nName: name of the singer\n\nPast Error (singer): An error to avoid in the future\n\nSinger:\n${singer}. Respond with a single JSON object. \nYou MUST use this format: {\"name\": \"Adele\", \"age\": 33, \"top_songs\": [\"Hello\", \"Someone Like You\"]}\nJSON Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}\n\n---\n\nName: Bruno Mars\n\nPast Error (singer): ValueError('json output should start and end with { and }')\n\nSinger:",
                    "output": "",
                    "token_usage": {
                        "completion_tokens": 33,
                        "prompt_tokens": 233,
                        "total_tokens": 266
                    }
                }
            ],
            "output": "Bruno Mars is 36 years old. His top 2 songs are ['Just the Way You Are', 'Uptown Funk']."
        }
    },
    "text_to_type": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\nPerson's Information (info) (str) = \"Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\"\n\n[Context]\n\n\n[Inputs Information]\n\n\n[Output Information]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(name=str, age=int, employer=Employer, job=str) -> Name (name) (str), Age (age) (int), Employer (employer) (Employer), Job (job) (str)\nEmployer (Employer) (obj) eg:- Employer(employer_name=str, location=str) -> Employer Name (employer_name) (str), Location (location) (str)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Output Type in the following format\n\n[Output] <result>\n\n---\n\n[Output]",
                    "output": "[Output] Person(name='Alice', age=21, employer=Employer(employer_name='LMQL Inc', location='Zurich'), job='engineer')",
                    "token_usage": {
                        "completion_tokens": 32,
                        "prompt_tokens": 264,
                        "total_tokens": 296
                    }
                }
            ],
            "output": ")\nTheir name is Alice and she works in Zurich."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nInfo: Person Information\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Employer\": {\"properties\": {\"employer_name\": {\"description\": \"Employer Name\", \"title\": \"Employer Name\", \"type\": \"string\"}, \"location\": {\"description\": \"Location\", \"title\": \"Location\", \"type\": \"string\"}}, \"required\": [\"employer_name\", \"location\"], \"title\": \"Employer\", \"type\": \"object\"}}, \"properties\": {\"name\": {\"description\": \"Name\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"job\": {\"description\": \"Job\", \"title\": \"Job\", \"type\": \"string\"}, \"employer\": {\"allOf\": [{\"$ref\": \"#/$defs/Employer\"}], \"description\": \"Employer\"}}, \"required\": [\"name\", \"age\", \"job\", \"employer\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nInfo: Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\nPerson:",
                    "output": "{\"name\": \"Alice\", \"age\": 21, \"job\": \"engineer\", \"employer\": {\"employer_name\": \"LMQL Inc\", \"location\": \"Zurich, Switzerland\"}}",
                    "token_usage": {
                        "completion_tokens": 41,
                        "prompt_tokens": 259,
                        "total_tokens": 300
                    }
                }
            ],
            "output": "Their name is Alice and she works in Zurich, Switzerland."
        }
    },
    "taskman": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Have some sleep\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The input value \"Have some sleep\" is provided as the description for the future task.\n[Output] Task(description=\"Have some sleep\", time=480, priority=8)",
                    "token_usage": {
                        "completion_tokens": 40,
                        "prompt_tokens": 248,
                        "total_tokens": 288
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Enjoy a better weekend with my girlfriend\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task of \"Enjoy a better weekend with my girlfriend\" can be represented as a Task object with a description and potential future actions to enhance the weekend experience with one's girlfriend.\n[Output] Task(description=\"Enjoy a better weekend with my girlfriend\", time=720, priority=8)",
                    "token_usage": {
                        "completion_tokens": 62,
                        "prompt_tokens": 252,
                        "total_tokens": 314
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Work on Jaseci Project\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Work on Jaseci Project\" needs to be converted into a Task object with a description, estimated time, and priority.\n[Output] Task(description=\"Work on Jaseci Project\", time=120, priority=8)",
                    "token_usage": {
                        "completion_tokens": 53,
                        "prompt_tokens": 251,
                        "total_tokens": 304
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Teach EECS 281 Students\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] \nCreating a Task object with the description \"Teach EECS 281 Students\" without specifying the time and priority.\n\n[Output] \nTask(description=\"Teach EECS 281 Students\", time=60, priority=8)",
                    "token_usage": {
                        "completion_tokens": 51,
                        "prompt_tokens": 252,
                        "total_tokens": 303
                    }
                }
            ],
            "output": ")"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Have some sleep\nTask:",
                    "output": "{\"properties\": {\"description\": {\"description\": \"Get some rest and sleep for at least 8 hours\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"480\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"8\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}",
                    "token_usage": {
                        "completion_tokens": 101,
                        "prompt_tokens": 152,
                        "total_tokens": 253
                    }
                },
                {
                    "prompt": "Make a very succinct json object that validates with the following schema\n\n---\n\nFollow the following format.\n\nJson Schema: ${json_schema}\nJson Object: ${json_object}\n\n---\n\nJson Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\nJson Object:",
                    "output": "{\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 20,
                        "prompt_tokens": 154,
                        "total_tokens": 174
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\n\nPast Error (task): An error to avoid in the future\n\nTask:\n${task}. Respond with a single JSON object. \nYou MUST use this format: {\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}\nJSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Have some sleep\n\nPast Error (task): Field required: description (error type: missing); Field required: time (error type: missing); Field required: priority (error type: missing)\n\nTask:",
                    "output": "",
                    "token_usage": {
                        "completion_tokens": 21,
                        "prompt_tokens": 227,
                        "total_tokens": 248
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy a better weekend with my girlfriend\nTask:",
                    "output": "{\"properties\": {\"description\": {\"description\": \"Spend quality time with my girlfriend and make her feel special\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"120 minutes\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"10 - High Priority\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}",
                    "token_usage": {
                        "completion_tokens": 106,
                        "prompt_tokens": 156,
                        "total_tokens": 262
                    }
                },
                {
                    "prompt": "Make a very succinct json object that validates with the following schema\n\n---\n\nFollow the following format.\n\nJson Schema: ${json_schema}\nJson Object: ${json_object}\n\n---\n\nJson Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\nJson Object:",
                    "output": "{\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 20,
                        "prompt_tokens": 154,
                        "total_tokens": 174
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\n\nPast Error (task): An error to avoid in the future\n\nTask:\n${task}. Respond with a single JSON object. \nYou MUST use this format: {\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}\nJSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy a better weekend with my girlfriend\n\nPast Error (task): Field required: description (error type: missing); Field required: time (error type: missing); Field required: priority (error type: missing)\n\nTask:",
                    "output": "",
                    "token_usage": {
                        "completion_tokens": 25,
                        "prompt_tokens": 231,
                        "total_tokens": 256
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Work on Jaseci Project\nTask:",
                    "output": "{\"properties\": {\"description\": {\"description\": \"Work on the Jaseci Project by completing the assigned tasks and meeting deadlines\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the project\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Project (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}",
                    "token_usage": {
                        "completion_tokens": 122,
                        "prompt_tokens": 155,
                        "total_tokens": 277
                    }
                },
                {
                    "prompt": "Make a very succinct json object that validates with the following schema\n\n---\n\nFollow the following format.\n\nJson Schema: ${json_schema}\nJson Object: ${json_object}\n\n---\n\nJson Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\nJson Object:",
                    "output": "{\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 20,
                        "prompt_tokens": 154,
                        "total_tokens": 174
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\n\nPast Error (task): An error to avoid in the future\n\nTask:\n${task}. Respond with a single JSON object. \nYou MUST use this format: {\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}\nJSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Work on Jaseci Project\n\nPast Error (task): Field required: description (error type: missing); Field required: time (error type: missing); Field required: priority (error type: missing)\n\nTask:",
                    "output": "",
                    "token_usage": {
                        "completion_tokens": 24,
                        "prompt_tokens": 230,
                        "total_tokens": 254
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Teach EECS 281 Students\nTask:",
                    "output": "{\"description\": \"Teach EECS 281 students about algorithms and data structures\", \"time\": 60, \"priority\": 9}",
                    "token_usage": {
                        "completion_tokens": 29,
                        "prompt_tokens": 155,
                        "total_tokens": 184
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy family time with my parents\nTask:",
                    "output": "{\"properties\": {\"description\": {\"description\": \"Spend quality time with my parents and enjoy their company\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"2 hours\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"8\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}",
                    "token_usage": {
                        "completion_tokens": 102,
                        "prompt_tokens": 155,
                        "total_tokens": 257
                    }
                },
                {
                    "prompt": "Make a very succinct json object that validates with the following schema\n\n---\n\nFollow the following format.\n\nJson Schema: ${json_schema}\nJson Object: ${json_object}\n\n---\n\nJson Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\nJson Object:",
                    "output": "{\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 20,
                        "prompt_tokens": 154,
                        "total_tokens": 174
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\n\nPast Error (task): An error to avoid in the future\n\nTask:\n${task}. Respond with a single JSON object. \nYou MUST use this format: {\"description\": \"Clean the house\", \"time\": 60, \"priority\": 8}\nJSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy family time with my parents\n\nPast Error (task): Field required: description (error type: missing); Field required: time (error type: missing); Field required: priority (error type: missing)\n\nTask:",
                    "output": "",
                    "token_usage": {
                        "completion_tokens": 25,
                        "prompt_tokens": 230,
                        "total_tokens": 255
                    }
                }
            ],
            "output": "[Task(description='Have some sleep', time=480, priority=10), Task(description='Spend quality time with my girlfriend', time=120, priority=9), Task(description='Work on Jaseci Project', time=120, priority=9), Task(description='Teach EECS 281 students about algorithms and data structures', time=60, priority=9), Task(description='Spend quality time with my parents', time=120, priority=9)]"
        }
    }
}